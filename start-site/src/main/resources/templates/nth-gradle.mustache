## Gradle

### Full example for Spring Boot Application `build.gradle`

```gradle
plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'java-library'
	id 'distribution'
	id 'maven-publish'
}

group = 'org.nth.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	deploymentZip
}

/* Replace tokens in application*.yml configurations */
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	with copySpec {
		from 'src/main/resources'
		include 'application*.yml'
		duplicatesStrategy 'include'
		project.properties.findAll {it.value != null}.each {
			filter(ReplaceTokens, tokens: [
					(it.key): it.value.toString(),
					("project." + it.key): it.value.toString()
			])
		}
		filter(ReplaceTokens, tokens: [
				'project.artifactId': project.property('name'),
				'project.groupId': project.property('group')
		])
	}
}

/* Copy SQL scripts from src/main/resources to deploy/sql */
task copySqlScripts(type: Copy) {
	group = 'distribution'
	from("src/main/resources/")
	into("$buildDir/deploy/sql")
	include "*.sql"
}

/* Copy deploy directory and replace placeholders in .sh scripts */
task copyDeploy(type: Copy) {
	group = 'distribution'
	dependsOn copySqlScripts
	from("deploy/")
	into("$buildDir/deploy")
	duplicatesStrategy 'include'
	filesMatching("**/*.sh") {
		project.properties.findAll {it.value != null}.each {
			filter(ReplaceTokens,
					beginToken : '${',
					endToken : '}',
					tokens: [
							(it.key): it.value.toString(),
							("project." + it.key): it.value.toString(),
							("pom." + it.key): it.value.toString()
					])
		}
		filter(ReplaceTokens, beginToken : '${',
				endToken : '}',
				tokens: [
						'project.artifactId': project.property('name'),
						'project.groupId': project.property('group'),
						'pom.artifactId': project.property('name'),
						'pom.groupId': project.property('group')
				])
		
	}
}

springBoot {
	buildInfo()
}

java {
	withSourcesJar()
}

distributions {
	main {
		contents {
			from copyDeploy
			from bootJar
		}
	}
}

publishing {
	repositories {
		maven {
			def releasesRepoUrl = 'http://dev1-git1.int.ch:8675/nexus/content/repositories/releases'
			def snapshotsRepoUrl = 'http://dev1-git1.int.ch:8675/nexus/content/repositories/snapshot-policy'
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			allowInsecureProtocol true
			credentials {
				username = System.getenv("MAVEN_REPO_USER")
				password = System.getenv("MAVEN_REPO_PASS")
			}
		}
	}
	publications {
		mavenPublication(MavenPublication) {
			/* Publish java components (jar, module, sources jar) */
			boolean publishJavaComponents = System.getenv("PUBLISH_JAVA_COMPONENTS") ?: false
			if (publishJavaComponents) {
				from components.java
			}

			/* Publish Spring Boot runnable jar if PUBLISH_BOOT_JAR environment variable is set to 'true' */
			boolean publishBootJar = System.getenv("PUBLISH_BOOT_JAR") ?: false
			if (publishBootJar && project.tasks.findByName('bootJar') && project.tasks.findByName('bootJar').enabled) {
				artifact bootJar
			}
			/* Publish distribution zip archive */
			boolean publishDistributionZip = System.getenv("PUBLISH_DISTRIBUTION_ZIP") ?: true
			if (publishDistributionZip && project.tasks.findByName('distZip') && project.tasks.findByName('distZip').enabled) {
				artifact source: distZip, classifier: 'deploy', extension: 'zip'
			}

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { 
		url 'http://dev1-git1.int.ch:8675/nexus/content/repositories/releases'
		allowInsecureProtocol true
	}
	maven { 
		url 'http://dev1-git1.int.ch:8675/nexus/content/repositories/snapshot-policy' 
		allowInsecureProtocol true
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.codehaus.janino:janino'
	implementation 'org.glassfish.jaxb:jaxb-runtime'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.distTar {
	enabled = false
}

tasks.named('bootJar') {
	launchScript {
		properties 'mode': 'service'
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.named('test') {
	useJUnitPlatform()
}
```

### GitLab CI `.gitlab-ci.yml` for Gradle

```yaml
image: gradle:alpine

variables:
  DOCKER_DRIVER: overlay2
  # Disable the Gradle daemon for Continuous Integration servers as correctness
  # is usually a priority over speed in CI environments. Using a fresh
  # runtime for each build is more reliable since the runtime is completely
  # isolated from any previous builds.
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  
before_script:
  - "echo '10.50.109.10 dev1-git1.loc.ch' >> /etc/hosts"
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:auto:
  stage: build
  script:
    - gradle publish
  #cache:
  #  key: "$CI_COMMIT_REF_NAME"
  #  policy: push
  #  paths:
  #    - build
  #    - .gradle 
  only:
    - master
    - develop

build:manual:
  stage: build
  script:
    - gradle publish
  #cache:
  #  key: "$CI_COMMIT_REF_NAME"
  #  policy: push
  #  paths:
  #    - build
  #    - .gradle
  when: manual
    
```